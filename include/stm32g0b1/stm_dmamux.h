/**
 * @file
 * @version 1.6
 * @brief Register access structs for None DMAMUX
 *
 * DMAMUX
 *
 * @note This file is autogenerated using register-code-gen
 */

#ifndef DMAMUX_H_
#define DMAMUX_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "static_assert.h"

#include <stdint.h>

/**
 * Synchronization overrun interrupt enable
 */
typedef enum DMAMUX_soie_e {
    /// interrupt disabled
    DMAMUX_soie_b_0x0 = 0x0,
    /// interrupt enabled
    DMAMUX_soie_b_0x1 = 0x1,
} DMAMUX_soie_t;

/**
 * Event generation enable
 */
typedef enum DMAMUX_ege_e {
    /// event generation disabled
    DMAMUX_ege_b_0x0 = 0x0,
    /// event generation enabled
    DMAMUX_ege_b_0x1 = 0x1,
} DMAMUX_ege_t;

/**
 * Synchronization enable
 */
typedef enum DMAMUX_se_e {
    /// synchronization disabled
    DMAMUX_se_b_0x0 = 0x0,
    /// synchronization enabled
    DMAMUX_se_b_0x1 = 0x1,
} DMAMUX_se_t;

/**
 * Synchronization polarity Defines the edge polarity of the selected
 * synchronization input:
 */
typedef enum DMAMUX_spol_e {
    /// no event, i.e. no synchronization nor detection.
    DMAMUX_spol_b_0x0 = 0x0,
    /// rising edge
    DMAMUX_spol_b_0x1 = 0x1,
    /// falling edge
    DMAMUX_spol_b_0x2 = 0x2,
    /// rising and falling edge
    DMAMUX_spol_b_0x3 = 0x3,
} DMAMUX_spol_t;

/**
 * DMAMUX request line multiplexer channel x configuration register
 */
typedef union DMAMUX_c0cr_u {
    struct {
        /// DMA request identification Selects the input DMA request. See the
        /// DMAMUX table about assignments of multiplexer inputs to resources.
        uint32_t       dmareq_id : 6;
        uint32_t const reserved_06 : 2;
        /// Synchronization overrun interrupt enable
        DMAMUX_soie_t soie : 1;
        /// Event generation enable
        DMAMUX_ege_t   ege : 1;
        uint32_t const reserved_10 : 6;
        /// Synchronization enable
        DMAMUX_se_t se : 1;
        /// Synchronization polarity Defines the edge polarity of the selected
        /// synchronization input:
        DMAMUX_spol_t spol : 2;
        /// Number of DMA requests minus 1 to forward Defines the number of DMA
        /// requests to forward to the DMA controller after a synchronization
        /// event, and/or the number of DMA requests before an output event is
        /// generated. This field shall only be written when both SE and EGE
        /// bits are low.
        uint32_t nbreq : 5;
        /// Synchronization identification Selects the synchronization input
        /// (see inputs to resources STM32G0).
        uint32_t sync_id : 5;
    };
    uint32_t bits;
} DMAMUX_c0cr_t;
STATIC_ASSERT_TYPE_SIZE(DMAMUX_c0cr_t, sizeof(uint32_t));

/**
 * DMAMUX request line multiplexer channel x configuration register
 */
typedef union DMAMUX_c1cr_u {
    struct {
        /// DMA request identification Selects the input DMA request. See the
        /// DMAMUX table about assignments of multiplexer inputs to resources.
        uint32_t       dmareq_id : 6;
        uint32_t const reserved_06 : 2;
        /// Synchronization overrun interrupt enable
        DMAMUX_soie_t soie : 1;
        /// Event generation enable
        DMAMUX_ege_t   ege : 1;
        uint32_t const reserved_10 : 6;
        /// Synchronization enable
        DMAMUX_se_t se : 1;
        /// Synchronization polarity Defines the edge polarity of the selected
        /// synchronization input:
        DMAMUX_spol_t spol : 2;
        /// Number of DMA requests minus 1 to forward Defines the number of DMA
        /// requests to forward to the DMA controller after a synchronization
        /// event, and/or the number of DMA requests before an output event is
        /// generated. This field shall only be written when both SE and EGE
        /// bits are low.
        uint32_t nbreq : 5;
        /// Synchronization identification Selects the synchronization input
        /// (see inputs to resources STM32G0).
        uint32_t sync_id : 5;
    };
    uint32_t bits;
} DMAMUX_c1cr_t;
STATIC_ASSERT_TYPE_SIZE(DMAMUX_c1cr_t, sizeof(uint32_t));

/**
 * DMAMUX request line multiplexer channel x configuration register
 */
typedef union DMAMUX_c2cr_u {
    struct {
        /// DMA request identification Selects the input DMA request. See the
        /// DMAMUX table about assignments of multiplexer inputs to resources.
        uint32_t       dmareq_id : 6;
        uint32_t const reserved_06 : 2;
        /// Synchronization overrun interrupt enable
        DMAMUX_soie_t soie : 1;
        /// Event generation enable
        DMAMUX_ege_t   ege : 1;
        uint32_t const reserved_10 : 6;
        /// Synchronization enable
        DMAMUX_se_t se : 1;
        /// Synchronization polarity Defines the edge polarity of the selected
        /// synchronization input:
        DMAMUX_spol_t spol : 2;
        /// Number of DMA requests minus 1 to forward Defines the number of DMA
        /// requests to forward to the DMA controller after a synchronization
        /// event, and/or the number of DMA requests before an output event is
        /// generated. This field shall only be written when both SE and EGE
        /// bits are low.
        uint32_t nbreq : 5;
        /// Synchronization identification Selects the synchronization input
        /// (see inputs to resources STM32G0).
        uint32_t sync_id : 5;
    };
    uint32_t bits;
} DMAMUX_c2cr_t;
STATIC_ASSERT_TYPE_SIZE(DMAMUX_c2cr_t, sizeof(uint32_t));

/**
 * DMAMUX request line multiplexer channel x configuration register
 */
typedef union DMAMUX_c3cr_u {
    struct {
        /// DMA request identification Selects the input DMA request. See the
        /// DMAMUX table about assignments of multiplexer inputs to resources.
        uint32_t       dmareq_id : 6;
        uint32_t const reserved_06 : 2;
        /// Synchronization overrun interrupt enable
        DMAMUX_soie_t soie : 1;
        /// Event generation enable
        DMAMUX_ege_t   ege : 1;
        uint32_t const reserved_10 : 6;
        /// Synchronization enable
        DMAMUX_se_t se : 1;
        /// Synchronization polarity Defines the edge polarity of the selected
        /// synchronization input:
        DMAMUX_spol_t spol : 2;
        /// Number of DMA requests minus 1 to forward Defines the number of DMA
        /// requests to forward to the DMA controller after a synchronization
        /// event, and/or the number of DMA requests before an output event is
        /// generated. This field shall only be written when both SE and EGE
        /// bits are low.
        uint32_t nbreq : 5;
        /// Synchronization identification Selects the synchronization input
        /// (see inputs to resources STM32G0).
        uint32_t sync_id : 5;
    };
    uint32_t bits;
} DMAMUX_c3cr_t;
STATIC_ASSERT_TYPE_SIZE(DMAMUX_c3cr_t, sizeof(uint32_t));

/**
 * DMAMUX request line multiplexer channel x configuration register
 */
typedef union DMAMUX_c4cr_u {
    struct {
        /// DMA request identification Selects the input DMA request. See the
        /// DMAMUX table about assignments of multiplexer inputs to resources.
        uint32_t       dmareq_id : 6;
        uint32_t const reserved_06 : 2;
        /// Synchronization overrun interrupt enable
        DMAMUX_soie_t soie : 1;
        /// Event generation enable
        DMAMUX_ege_t   ege : 1;
        uint32_t const reserved_10 : 6;
        /// Synchronization enable
        DMAMUX_se_t se : 1;
        /// Synchronization polarity Defines the edge polarity of the selected
        /// synchronization input:
        DMAMUX_spol_t spol : 2;
        /// Number of DMA requests minus 1 to forward Defines the number of DMA
        /// requests to forward to the DMA controller after a synchronization
        /// event, and/or the number of DMA requests before an output event is
        /// generated. This field shall only be written when both SE and EGE
        /// bits are low.
        uint32_t nbreq : 5;
        /// Synchronization identification Selects the synchronization input
        /// (see inputs to resources STM32G0).
        uint32_t sync_id : 5;
    };
    uint32_t bits;
} DMAMUX_c4cr_t;
STATIC_ASSERT_TYPE_SIZE(DMAMUX_c4cr_t, sizeof(uint32_t));

/**
 * DMAMUX request line multiplexer channel x configuration register
 */
typedef union DMAMUX_c5cr_u {
    struct {
        /// DMA request identification Selects the input DMA request. See the
        /// DMAMUX table about assignments of multiplexer inputs to resources.
        uint32_t       dmareq_id : 6;
        uint32_t const reserved_06 : 2;
        /// Synchronization overrun interrupt enable
        DMAMUX_soie_t soie : 1;
        /// Event generation enable
        DMAMUX_ege_t   ege : 1;
        uint32_t const reserved_10 : 6;
        /// Synchronization enable
        DMAMUX_se_t se : 1;
        /// Synchronization polarity Defines the edge polarity of the selected
        /// synchronization input:
        DMAMUX_spol_t spol : 2;
        /// Number of DMA requests minus 1 to forward Defines the number of DMA
        /// requests to forward to the DMA controller after a synchronization
        /// event, and/or the number of DMA requests before an output event is
        /// generated. This field shall only be written when both SE and EGE
        /// bits are low.
        uint32_t nbreq : 5;
        /// Synchronization identification Selects the synchronization input
        /// (see inputs to resources STM32G0).
        uint32_t sync_id : 5;
    };
    uint32_t bits;
} DMAMUX_c5cr_t;
STATIC_ASSERT_TYPE_SIZE(DMAMUX_c5cr_t, sizeof(uint32_t));

/**
 * DMAMUX request line multiplexer channel x configuration register
 */
typedef union DMAMUX_c6cr_u {
    struct {
        /// DMA request identification Selects the input DMA request. See the
        /// DMAMUX table about assignments of multiplexer inputs to resources.
        uint32_t       dmareq_id : 6;
        uint32_t const reserved_06 : 2;
        /// Synchronization overrun interrupt enable
        DMAMUX_soie_t soie : 1;
        /// Event generation enable
        DMAMUX_ege_t   ege : 1;
        uint32_t const reserved_10 : 6;
        /// Synchronization enable
        DMAMUX_se_t se : 1;
        /// Synchronization polarity Defines the edge polarity of the selected
        /// synchronization input:
        DMAMUX_spol_t spol : 2;
        /// Number of DMA requests minus 1 to forward Defines the number of DMA
        /// requests to forward to the DMA controller after a synchronization
        /// event, and/or the number of DMA requests before an output event is
        /// generated. This field shall only be written when both SE and EGE
        /// bits are low.
        uint32_t nbreq : 5;
        /// Synchronization identification Selects the synchronization input
        /// (see inputs to resources STM32G0).
        uint32_t sync_id : 5;
    };
    uint32_t bits;
} DMAMUX_c6cr_t;
STATIC_ASSERT_TYPE_SIZE(DMAMUX_c6cr_t, sizeof(uint32_t));

/**
 * DMAMUX request line multiplexer interrupt channel status register
 */
typedef union DMAMUX_csr_u {
    struct {
        /// Synchronization overrun event flag The flag is set when a
        /// synchronization event occurs on a DMA request line multiplexer
        /// channel x, while the DMA request counter value is lower than NBREQ.
        /// The flag is cleared by writing 1 to the corresponding CSOFx bit in
        /// DMAMUX_CFR register.
        uint32_t const sof0 : 1;
        /// Synchronization overrun event flag The flag is set when a
        /// synchronization event occurs on a DMA request line multiplexer
        /// channel x, while the DMA request counter value is lower than NBREQ.
        /// The flag is cleared by writing 1 to the corresponding CSOFx bit in
        /// DMAMUX_CFR register.
        uint32_t const sof1 : 1;
        /// Synchronization overrun event flag The flag is set when a
        /// synchronization event occurs on a DMA request line multiplexer
        /// channel x, while the DMA request counter value is lower than NBREQ.
        /// The flag is cleared by writing 1 to the corresponding CSOFx bit in
        /// DMAMUX_CFR register.
        uint32_t const sof2 : 1;
        /// Synchronization overrun event flag The flag is set when a
        /// synchronization event occurs on a DMA request line multiplexer
        /// channel x, while the DMA request counter value is lower than NBREQ.
        /// The flag is cleared by writing 1 to the corresponding CSOFx bit in
        /// DMAMUX_CFR register.
        uint32_t const sof3 : 1;
        /// Synchronization overrun event flag The flag is set when a
        /// synchronization event occurs on a DMA request line multiplexer
        /// channel x, while the DMA request counter value is lower than NBREQ.
        /// The flag is cleared by writing 1 to the corresponding CSOFx bit in
        /// DMAMUX_CFR register.
        uint32_t const sof4 : 1;
        /// Synchronization overrun event flag The flag is set when a
        /// synchronization event occurs on a DMA request line multiplexer
        /// channel x, while the DMA request counter value is lower than NBREQ.
        /// The flag is cleared by writing 1 to the corresponding CSOFx bit in
        /// DMAMUX_CFR register.
        uint32_t const sof5 : 1;
        /// Synchronization overrun event flag The flag is set when a
        /// synchronization event occurs on a DMA request line multiplexer
        /// channel x, while the DMA request counter value is lower than NBREQ.
        /// The flag is cleared by writing 1 to the corresponding CSOFx bit in
        /// DMAMUX_CFR register.
        uint32_t const sof6 : 1;
    };
    uint32_t bits;
} DMAMUX_csr_t;
STATIC_ASSERT_TYPE_SIZE(DMAMUX_csr_t, sizeof(uint32_t));

/**
 * DMAMUX request line multiplexer interrupt clear flag register
 */
typedef union DMAMUX_cfr_u {
    struct {
        /// Clear synchronization overrun event flag Writing 1 in each bit
        /// clears the corresponding overrun flag SOFx in the DMAMUX_CSR
        /// register.
        uint32_t csof0 : 1;
        /// Clear synchronization overrun event flag Writing 1 in each bit
        /// clears the corresponding overrun flag SOFx in the DMAMUX_CSR
        /// register.
        uint32_t csof1 : 1;
        /// Clear synchronization overrun event flag Writing 1 in each bit
        /// clears the corresponding overrun flag SOFx in the DMAMUX_CSR
        /// register.
        uint32_t csof2 : 1;
        /// Clear synchronization overrun event flag Writing 1 in each bit
        /// clears the corresponding overrun flag SOFx in the DMAMUX_CSR
        /// register.
        uint32_t csof3 : 1;
        /// Clear synchronization overrun event flag Writing 1 in each bit
        /// clears the corresponding overrun flag SOFx in the DMAMUX_CSR
        /// register.
        uint32_t csof4 : 1;
        /// Clear synchronization overrun event flag Writing 1 in each bit
        /// clears the corresponding overrun flag SOFx in the DMAMUX_CSR
        /// register.
        uint32_t csof5 : 1;
        /// Clear synchronization overrun event flag Writing 1 in each bit
        /// clears the corresponding overrun flag SOFx in the DMAMUX_CSR
        /// register.
        uint32_t csof6 : 1;
    };
    uint32_t bits;
} DMAMUX_cfr_t;
STATIC_ASSERT_TYPE_SIZE(DMAMUX_cfr_t, sizeof(uint32_t));

/**
 * Trigger overrun interrupt enable
 */
typedef enum DMAMUX_oie_e {
    /// interrupt on a trigger overrun event occurrence is disabled
    DMAMUX_oie_b_0x0 = 0x0,
    /// interrupt on a trigger overrun event occurrence is enabled
    DMAMUX_oie_b_0x1 = 0x1,
} DMAMUX_oie_t;

/**
 * DMA request generator channel x enable
 */
typedef enum DMAMUX_ge_e {
    /// DMA request generator channel x disabled
    DMAMUX_ge_b_0x0 = 0x0,
    /// DMA request generator channel x enabled
    DMAMUX_ge_b_0x1 = 0x1,
} DMAMUX_ge_t;

/**
 * DMA request generator trigger polarity Defines the edge polarity of the
 * selected trigger input
 */
typedef enum DMAMUX_gpol_e {
    /// no event. I.e. none trigger detection nor generation.
    DMAMUX_gpol_b_0x0 = 0x0,
    /// rising edge
    DMAMUX_gpol_b_0x1 = 0x1,
    /// falling edge
    DMAMUX_gpol_b_0x2 = 0x2,
    /// rising and falling edge
    DMAMUX_gpol_b_0x3 = 0x3,
} DMAMUX_gpol_t;

/**
 * DMAMUX request generator channel x configuration register
 */
typedef union DMAMUX_rg0cr_u {
    struct {
        /// Signal identification Selects the DMA request trigger input used for
        /// the channel x of the DMA request generator
        uint32_t       sig_id : 5;
        uint32_t const reserved_05 : 3;
        /// Trigger overrun interrupt enable
        DMAMUX_oie_t   oie : 1;
        uint32_t const reserved_09 : 7;
        /// DMA request generator channel x enable
        DMAMUX_ge_t ge : 1;
        /// DMA request generator trigger polarity Defines the edge polarity of
        /// the selected trigger input
        DMAMUX_gpol_t gpol : 2;
        /// Number of DMA requests to be generated (minus 1) Defines the number
        /// of DMA requests to be generated after a trigger event. The actual
        /// number of generated DMA requests is GNBREQ +1. Note: This field
        /// shall only be written when GE bit is disabled.
        uint32_t gnbreq : 5;
    };
    uint32_t bits;
} DMAMUX_rg0cr_t;
STATIC_ASSERT_TYPE_SIZE(DMAMUX_rg0cr_t, sizeof(uint32_t));

/**
 * DMAMUX request generator channel x configuration register
 */
typedef union DMAMUX_rg1cr_u {
    struct {
        /// Signal identification Selects the DMA request trigger input used for
        /// the channel x of the DMA request generator
        uint32_t       sig_id : 5;
        uint32_t const reserved_05 : 3;
        /// Trigger overrun interrupt enable
        DMAMUX_oie_t   oie : 1;
        uint32_t const reserved_09 : 7;
        /// DMA request generator channel x enable
        DMAMUX_ge_t ge : 1;
        /// DMA request generator trigger polarity Defines the edge polarity of
        /// the selected trigger input
        DMAMUX_gpol_t gpol : 2;
        /// Number of DMA requests to be generated (minus 1) Defines the number
        /// of DMA requests to be generated after a trigger event. The actual
        /// number of generated DMA requests is GNBREQ +1. Note: This field
        /// shall only be written when GE bit is disabled.
        uint32_t gnbreq : 5;
    };
    uint32_t bits;
} DMAMUX_rg1cr_t;
STATIC_ASSERT_TYPE_SIZE(DMAMUX_rg1cr_t, sizeof(uint32_t));

/**
 * DMAMUX request generator channel x configuration register
 */
typedef union DMAMUX_rg2cr_u {
    struct {
        /// Signal identification Selects the DMA request trigger input used for
        /// the channel x of the DMA request generator
        uint32_t       sig_id : 5;
        uint32_t const reserved_05 : 3;
        /// Trigger overrun interrupt enable
        DMAMUX_oie_t   oie : 1;
        uint32_t const reserved_09 : 7;
        /// DMA request generator channel x enable
        DMAMUX_ge_t ge : 1;
        /// DMA request generator trigger polarity Defines the edge polarity of
        /// the selected trigger input
        DMAMUX_gpol_t gpol : 2;
        /// Number of DMA requests to be generated (minus 1) Defines the number
        /// of DMA requests to be generated after a trigger event. The actual
        /// number of generated DMA requests is GNBREQ +1. Note: This field
        /// shall only be written when GE bit is disabled.
        uint32_t gnbreq : 5;
    };
    uint32_t bits;
} DMAMUX_rg2cr_t;
STATIC_ASSERT_TYPE_SIZE(DMAMUX_rg2cr_t, sizeof(uint32_t));

/**
 * DMAMUX request generator channel x configuration register
 */
typedef union DMAMUX_rg3cr_u {
    struct {
        /// Signal identification Selects the DMA request trigger input used for
        /// the channel x of the DMA request generator
        uint32_t       sig_id : 5;
        uint32_t const reserved_05 : 3;
        /// Trigger overrun interrupt enable
        DMAMUX_oie_t   oie : 1;
        uint32_t const reserved_09 : 7;
        /// DMA request generator channel x enable
        DMAMUX_ge_t ge : 1;
        /// DMA request generator trigger polarity Defines the edge polarity of
        /// the selected trigger input
        DMAMUX_gpol_t gpol : 2;
        /// Number of DMA requests to be generated (minus 1) Defines the number
        /// of DMA requests to be generated after a trigger event. The actual
        /// number of generated DMA requests is GNBREQ +1. Note: This field
        /// shall only be written when GE bit is disabled.
        uint32_t gnbreq : 5;
    };
    uint32_t bits;
} DMAMUX_rg3cr_t;
STATIC_ASSERT_TYPE_SIZE(DMAMUX_rg3cr_t, sizeof(uint32_t));

/**
 * DMAMUX request generator interrupt status register
 */
typedef union DMAMUX_rgsr_u {
    struct {
        /// Trigger overrun event flag The flag is set when a new trigger event
        /// occurs on DMA request generator channel x, before the request
        /// counter underrun (the internal request counter programmed via the
        /// GNBREQ field of the DMAMUX_RGxCR register). The flag is cleared by
        /// writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR
        /// register.
        uint32_t const of0 : 1;
        /// Trigger overrun event flag The flag is set when a new trigger event
        /// occurs on DMA request generator channel x, before the request
        /// counter underrun (the internal request counter programmed via the
        /// GNBREQ field of the DMAMUX_RGxCR register). The flag is cleared by
        /// writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR
        /// register.
        uint32_t const of1 : 1;
        /// Trigger overrun event flag The flag is set when a new trigger event
        /// occurs on DMA request generator channel x, before the request
        /// counter underrun (the internal request counter programmed via the
        /// GNBREQ field of the DMAMUX_RGxCR register). The flag is cleared by
        /// writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR
        /// register.
        uint32_t const of2 : 1;
        /// Trigger overrun event flag The flag is set when a new trigger event
        /// occurs on DMA request generator channel x, before the request
        /// counter underrun (the internal request counter programmed via the
        /// GNBREQ field of the DMAMUX_RGxCR register). The flag is cleared by
        /// writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR
        /// register.
        uint32_t const of3 : 1;
    };
    uint32_t bits;
} DMAMUX_rgsr_t;
STATIC_ASSERT_TYPE_SIZE(DMAMUX_rgsr_t, sizeof(uint32_t));

/**
 * DMAMUX request generator interrupt clear flag register
 */
typedef union DMAMUX_rgcfr_u {
    struct {
        /// Clear trigger overrun event flag Writing 1 in each bit clears the
        /// corresponding overrun flag OFx in the DMAMUX_RGSR register.
        uint32_t cof0 : 1;
        /// Clear trigger overrun event flag Writing 1 in each bit clears the
        /// corresponding overrun flag OFx in the DMAMUX_RGSR register.
        uint32_t cof1 : 1;
        /// Clear trigger overrun event flag Writing 1 in each bit clears the
        /// corresponding overrun flag OFx in the DMAMUX_RGSR register.
        uint32_t cof2 : 1;
        /// Clear trigger overrun event flag Writing 1 in each bit clears the
        /// corresponding overrun flag OFx in the DMAMUX_RGSR register.
        uint32_t cof3 : 1;
    };
    uint32_t bits;
} DMAMUX_rgcfr_t;
STATIC_ASSERT_TYPE_SIZE(DMAMUX_rgcfr_t, sizeof(uint32_t));

/**
 * DMAMUX
 */
typedef struct DMAMUX_peripheral_registers_s {
    /// DMAMUX request line multiplexer channel x configuration register
    DMAMUX_c0cr_t c0cr;
    /// DMAMUX request line multiplexer channel x configuration register
    DMAMUX_c1cr_t c1cr;
    /// DMAMUX request line multiplexer channel x configuration register
    DMAMUX_c2cr_t c2cr;
    /// DMAMUX request line multiplexer channel x configuration register
    DMAMUX_c3cr_t c3cr;
    /// DMAMUX request line multiplexer channel x configuration register
    DMAMUX_c4cr_t c4cr;
    /// DMAMUX request line multiplexer channel x configuration register
    DMAMUX_c5cr_t c5cr;
    /// DMAMUX request line multiplexer channel x configuration register
    DMAMUX_c6cr_t c6cr;
    uint8_t const reserved_0x1C[100];
    /// DMAMUX request line multiplexer interrupt channel status register
    DMAMUX_csr_t csr;
    /// DMAMUX request line multiplexer interrupt clear flag register
    DMAMUX_cfr_t  cfr;
    uint8_t const reserved_0x88[120];
    /// DMAMUX request generator channel x configuration register
    DMAMUX_rg0cr_t rg0cr;
    /// DMAMUX request generator channel x configuration register
    DMAMUX_rg1cr_t rg1cr;
    /// DMAMUX request generator channel x configuration register
    DMAMUX_rg2cr_t rg2cr;
    /// DMAMUX request generator channel x configuration register
    DMAMUX_rg3cr_t rg3cr;
    uint8_t const  reserved_0x110[48];
    /// DMAMUX request generator interrupt status register
    DMAMUX_rgsr_t rgsr;
    /// DMAMUX request generator interrupt clear flag register
    DMAMUX_rgcfr_t rgcfr;
} DMAMUX_peripheral_registers_t;
STATIC_ASSERT_MEMBER_OFFSET(DMAMUX_peripheral_registers_t, c0cr, 0x00);
STATIC_ASSERT_MEMBER_OFFSET(DMAMUX_peripheral_registers_t, c1cr, 0x04);
STATIC_ASSERT_MEMBER_OFFSET(DMAMUX_peripheral_registers_t, c2cr, 0x08);
STATIC_ASSERT_MEMBER_OFFSET(DMAMUX_peripheral_registers_t, c3cr, 0x0C);
STATIC_ASSERT_MEMBER_OFFSET(DMAMUX_peripheral_registers_t, c4cr, 0x10);
STATIC_ASSERT_MEMBER_OFFSET(DMAMUX_peripheral_registers_t, c5cr, 0x14);
STATIC_ASSERT_MEMBER_OFFSET(DMAMUX_peripheral_registers_t, c6cr, 0x18);
STATIC_ASSERT_MEMBER_OFFSET(DMAMUX_peripheral_registers_t, csr, 0x80);
STATIC_ASSERT_MEMBER_OFFSET(DMAMUX_peripheral_registers_t, cfr, 0x84);
STATIC_ASSERT_MEMBER_OFFSET(DMAMUX_peripheral_registers_t, rg0cr, 0x100);
STATIC_ASSERT_MEMBER_OFFSET(DMAMUX_peripheral_registers_t, rg1cr, 0x104);
STATIC_ASSERT_MEMBER_OFFSET(DMAMUX_peripheral_registers_t, rg2cr, 0x108);
STATIC_ASSERT_MEMBER_OFFSET(DMAMUX_peripheral_registers_t, rg3cr, 0x10C);
STATIC_ASSERT_MEMBER_OFFSET(DMAMUX_peripheral_registers_t, rgsr, 0x140);
STATIC_ASSERT_MEMBER_OFFSET(DMAMUX_peripheral_registers_t, rgcfr, 0x144);

#ifdef __cplusplus
}
#endif
#endif // DMAMUX_H_
